Script started on Tue Jan 26 20:05:21 2016
comer028@csel-vole-04:~$ clojure
[KClojure 1.4.0
[Kuser=> [Kuser=> [Kuser=> (ns user(:import java.lang.Math)user=> (ns user(:import java.lang.Math))user=> (ns user(:import java.lang.Math))user=> [K[K"[K(ns user(:import java.lang.Math))
[K"Question 1"[K[K([K"Question 1"
[K(defn maxmul7 ([a b][a b][K[K [K(defn maxmul7 ([a b]
[K    (cond[K[K [K    (cond
[K      (> a b)(> a b) nil[K[K [K      (> a b) nil
[K      (= (mod b 7)(mod b 7) 0)      (= (mod b 7) 0) b[K[K [K      (= (mod b 7) 0) b
[K      :else (maxmul7 a (- b 1)(- b 1))      :else (maxmul7 a (- b 1)))))[K[K      :else (maxmul7 a (- b 1)))))
[K"[K
[K"Question 2"[K[K([K"Question 2"
[K(defn sumcube ([a b][a b] (sumcube a b 0)(sumcube a b 0))(defn sumcube ([a b] (sumcube a b 0))[K[K [K(defn sumcube ([a b] (sumcube a b 0))
[K  ([a b t]  ([a b t][K[K [K  ([a b t]
[K    (cond[K[K [K    (cond
[K      (> a b)(> a b) t[K[K [K      (> a b) t
[K      :else (sumcube (+ a 1)(+ a 1) b (+ t (* (* a a)(* a a) a)(* (* a a) a))(+ t (* (* a a) a)))      :else (sumcube (+ a 1) b (+ t (* (* a a) a))))))[K[K      :else (sumcube (+ a 1) b (+ t (* (* a a) a))))))
[K"[K
[K"Question 3"[K[K([K"Question 3"
[K(defn drop2nd [a][a][K[K [K(defn drop2nd [a]
[K  (concat (list (first a)(first a))  (concat (list (first a)) (drop 2 a)(drop 2 a))  (concat (list (first a)) (drop 2 a)))[K[K  (concat (list (first a)) (drop 2 a)))
[K"[K
[K"Question 4"[K[K([K"Question 4"
[K(defn perfect ([a][a] (perfect a 0 1)(perfect a 0 1))(defn perfect ([a] (perfect a 0 1))[K[K [K(defn perfect ([a] (perfect a 0 1))
[K  ([a s c]  ([a s c][K[K [K  ([a s c]
[K   (cond[K[K [K   (cond
java.lang.Math
user=> [Kuser=>  [K[Kuser=> "Question 1"
user=> [Kuser=>      (>= c a)(>= c a) (= s a)(= s a)user=> [K[K [K     (>= c a) (= s a)
[K     (= (rem a c)(rem a c) 0)     (= (rem a c) 0) (perfect a (+ s c)(+ s c) (+ c 1)(+ c 1))     (= (rem a c) 0) (perfect a (+ s c) (+ c 1))[K[K [K     (= (rem a c) 0) (perfect a (+ s c) (+ c 1))
[K     :else (perfect a s (+ c 1)(+ c 1))     :else (perfect a s (+ c 1)))))[K[K     :else (perfect a s (+ c 1)))))
[K"[K
[K"Question 5"[K[K([K"Question 5"
#'user/maxmul7
[K([Kuser=> user=> "Question 2"
user=> [Kuser=> (defn ave ([a][a] (ave a 0 0)(ave a 0 0))([a] (ave a 0 0))user=> [K[K [K(defn ave ([a] (ave a 0 0))
[K  ([a total count]  ([a total count][K[K [K  ([a total count]
[K   (cond[K[K [K   (cond
[K [K#'user/sumcube
user=> user=> [Kuser=> user=>  [K[Kuser=> user=> "Question 3"
user=> [Kuser=>      (= nil (first a)(first a))user=>      (= nil (first a)) (/ total count)(/ total count)user=> [K[K [K     (= nil (first a)) (/ total count)
[K [K#'user/drop2nd
user=> user=> "Question 4"
user=> [Kuser=>      :else (ave (rest a)(rest a) (+ total (first a)(first a))(+ total (first a)) (+ count 1)(+ count 1))user=>      :else (ave (rest a) (+ total (first a)) (+ count 1)))))user=> [K[K [K     :else (ave (rest a) (+ total (first a)) (+ count 1)))))
[K            [K[K([K            
[K(defn stddev ([a][a][K[K [K(defn stddev ([a]
[K [K#'user/perfect
user=> [Kuser=>  [K[Kuser=> user=> "Question 5"
user=> [Kuser=>   (do (def m (ave a)(ave a))user=>   (do (def m (ave a))user=> [K[K [K  (do (def m (ave a))
[K   (Math/sqrt (ave (map (fn [x][x] (* (- x m)(- x m) (- x m)(- x m))(* (- x m) (- x m)))   (Math/sqrt (ave (map (fn [x] (* (- x m) (- x m))) a)   (Math/sqrt (ave (map (fn [x] (* (- x m) (- x m))) a) 0 -1)   (Math/sqrt (ave (map (fn [x] (* (- x m) (- x m))) a) 0 -1))   (Math/sqrt (ave (map (fn [x] (* (- x m) (- x m))) a) 0 -1)))))[K[K   (Math/sqrt (ave (map (fn [x] (* (- x m) (- x m))) a) 0 -1)))))
[K"[K
#'user/ave
[K"[Kuser=> user=> [Kuser=> user=> "Question 6"[K[K([K"Question 6"
[K(defn posel ([a b][a b] (posel a b 0)(posel a b 0))(defn posel ([a b] (posel a b 0))[K[K [K(defn posel ([a b] (posel a b 0))
[K  ([a b c]  ([a b c][K[K [K  ([a b c]
[K    (cond [K[K [K    (cond 
[K [K#'user/stddev
[K [Kuser=> user=> "Question 6"
user=> [Kuser=>       (= nil (first a)(first a))user=>       (= nil (first a)) niluser=> [K[K [K      (= nil (first a)) nil
[K      (= b (first a)(first a))      (= b (first a)) c[K[K [K      (= b (first a)) c
[K      :else (posel (rest a)(rest a) b (+ c 1)(+ c 1))      :else (posel (rest a) b (+ c 1)))))[K      :else (posel (rest a) b (+ c 1)))))
#'user/posel
user=> [Kuser=> [Kuser=> (maxmul7 1 209 )user=> (maxmul7 1 20)user=> [K(maxmul7 1 20)
14
user=> [Kuser=> [Kuser=> (maxmul7 20 35)user=> (maxmul7 20 35)user=> [K(maxmul7 20 35)
35
user=> [Kuser=> [Kuser=> (max  mul7 1 6)user=> (maxmul7 1 6)user=> [K(maxmul7 1 6)
nil
user=> [Kuser=> [Kuser=> (maxmul7 7 10)user=> (maxmul7 7 10)user=> [K(maxmul7 7 10)
7
user=> [Kuser=> [Kuser=> (sumcube 1 3)user=> (sumcube 1 3)user=> [K(sumcube 1 3)
36
user=> [Kuser=> [Kuser=> (drop2nd [1 2 3 4][1 2 3 4])user=> (drop2nd [1 2 3 4])user=> [K(drop2nd [1 2 3 4])
(1 3 4)
user=> [Kuser=> [Kuser=> (perfect 6)user=> (perfect 6)user=> [K(perfect 6)
true
user=> [Kuser=> [Kuser=> (perfect 10)user=> (perfect 10)user=> [K(perfect 10)
false
user=> [Kuser=> [Kuser=> (ave [1 2 3 4][1 2 3 4])user=> (ave [1 2 3 4])user=> [K(ave [1 2 3 4])
5/2
user=> [Kuser=> [Kuser=> (stde decv  v [1 2 3 4][1 2 3 4])user=> (stddev [1 2 3 4])user=> [K(stddev [1 2 3 4])
1.2909944487358058
user=> [Kuser=> [Kuser=> (posel [10 20 30 40][10 20 30 40] 30)user=> (posel [10 20 30 40] 30)user=> [K(posel [10 20 30 40] 30)
2
user=> [Kuser=> [Kuser=> 
[Kcomer028@csel-vole-04:~$ exit

Script done on Tue Jan 26 20:08:02 2016
