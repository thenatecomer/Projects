                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Nathan Comer
                            | # ID: 5119060
                            | # Utilized loop unrolling (LoopA) to calculate and move 5 elements
                            | # at once. After the numbers of elemenets remaining is < 5 LoopB is
                            | # used to finish the remaining elements. Also removed the counter
                            | # for negative numbers and instead calculated the number of negative
                            | # numbers at the end. Used the iaddq instruction to reduce the number
                            | # of instructions. Lastly removed data dependencies and other delays
                            | # to increase the code's efficiency. 
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x000: 202a                 | 	rrmovq %rdx, %r10
0x002: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x004: 712a02000000000000   | 	jle Done		# if so, goto Done:
0x00d: 6300                 | 	xorq %rax,%rax		# count = 0;
0x00f: 6311                 | 	xorq %rcx,%rcx		# count = 0;
0x011: 2023                 | 	rrmovq %rdx, %rbx	# move len to rbx so we can calculate the number of negatives later
0x013: c0fafbffffffffffffff | 	iaddq $-5, %r10		# if len < 5 go to LoopB
0x01d: 71bf01000000000000   | 	jle LoopB	
                            | 
0x026: 50a70000000000000000 | LoopA:	mrmovq (%rdi), %r10	# Read all 5 values
0x030: 50b70800000000000000 | 	mrmovq 0x8(%rdi), %r11
0x03a: 50c71000000000000000 | 	mrmovq 0x10(%rdi), %r12  
0x044: 50d71800000000000000 | 	mrmovq 0x18(%rdi), %r13
0x04e: 50e72000000000000000 | 	mrmovq 0x20(%rdi), %r14	
0x058: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# Move all 5 values	
0x062: 40b60800000000000000 | 	rmmovq %r11, 0x8(%rsi)	
0x06c: 40c61000000000000000 | 	rmmovq %r12, 0x10(%rsi)	
0x076: 40d61800000000000000 | 	rmmovq %r13, 0x18(%rsi)	
0x080: 40e62000000000000000 | 	rmmovq %r14, 0x20(%rsi) 
                            | 
0x08a: c0f2fbffffffffffffff | 	iaddq $-5, %rdx		# len--	   
0x094: c0f72800000000000000 | 	iaddq $0x28, %rdi	# src++	   
0x09e: c0f62800000000000000 | 	iaddq $0x28, %rsi	# dst++    
                            | 				
                            | 				# The next 5 blocks of code increment the appropriate counters
                            | 				# for each value
                            | 	
0x0a8: 62aa                 | 	andq %r10, %r10		
0x0aa: 72d900000000000000   | 	jl PosA			# if val #1 < 0 skip to next value
0x0b3: 74cf00000000000000   | 	jne ZeroA		
0x0bc: c0f10100000000000000 | 	iaddq $1, %rcx		# if value #1 = 0 increment rcx
0x0c6: 70d900000000000000   | 	jmp PosA
0x0cf: c0f00100000000000000 | ZeroA:	iaddq $1, %rax		# if value #1 > 0 increment rax
                            | 
0x0d9: 62bb                 | PosA:	andq %r11, %r11		# val #2
0x0db: 720a01000000000000   | 	jl PosB
0x0e4: 740001000000000000   | 	jne ZeroB
0x0ed: c0f10100000000000000 | 	iaddq $1, %rcx
0x0f7: 700a01000000000000   | 	jmp PosB
0x100: c0f00100000000000000 | ZeroB:	iaddq $1, %rax
                            | 
0x10a: 62cc                 | PosB:	andq %r12, %r12		# val #3
0x10c: 723b01000000000000   | 	jl PosC
0x115: 743101000000000000   | 	jne ZeroC
0x11e: c0f10100000000000000 | 	iaddq $1, %rcx
0x128: 703b01000000000000   | 	jmp PosC
0x131: c0f00100000000000000 | ZeroC:	iaddq $1, %rax
                            | 
0x13b: 62dd                 | PosC:	andq %r13, %r13		# val #4
0x13d: 726c01000000000000   | 	jl PosD
0x146: 746201000000000000   | 	jne ZeroD
0x14f: c0f10100000000000000 | 	iaddq $1, %rcx
0x159: 706c01000000000000   | 	jmp PosD
0x162: c0f00100000000000000 | ZeroD:	iaddq $1, %rax
                            | 
0x16c: 62ee                 | PosD:	andq %r14, %r14		# val #5
0x16e: 729d01000000000000   | 	jl PosE
0x177: 749301000000000000   | 	jne ZeroE
0x180: c0f10100000000000000 | 	iaddq $1, %rcx
0x18a: 709d01000000000000   | 	jmp PosE
0x193: c0f00100000000000000 | ZeroE:	iaddq $1, %rax
                            | 
0x19d: 202a                 | PosE:	rrmovq %rdx, %r10
0x19f: c0fafcffffffffffffff | 	iaddq $-4, %r10
0x1a9: 62aa                 | 	andq %r10, %r10
0x1ab: 762600000000000000   | 	jg LoopA		# if len > 4 go to LoopA
0x1b4: 6222                 | 	andq %rdx, %rdx	
0x1b6: 712602000000000000   | 	jle End			# if len <= 0 go to End
                            | 
0x1bf: 50a70000000000000000 | LoopB:	mrmovq (%rdi), %r10	# read val from src...
                            | 				# Incrementers placed here to decrease data dependency latency
0x1c9: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x1d3: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--	
0x1dd: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x1e7: 40a6f8ffffffffffffff | 	rmmovq %r10, -8(%rsi)	# ...and store it to dst
0x1f1: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1f3: 710602000000000000   | 	jle temp		# if so, goto temp: 
0x1fc: c0f00100000000000000 | 	iaddq $1, %rax		# Count positives in rax - count_pos++
0x206: 62aa                 | temp:	andq %r10, %r10		# 
0x208: 741b02000000000000   | 	jne Rest		# if val = 0 count_zero++
0x211: c0f10100000000000000 | 	iaddq $1, %rcx
0x21b: 6222                 | Rest:	andq %rdx,%rdx		# len > 0?
0x21d: 76bf01000000000000   | 	jg LoopB		# if so, goto LoopB:
                            | 
0x226: 6103                 | End:	subq %rax, %rbx		# Calculate number of negatives:
0x228: 6113                 | 	subq %rcx, %rbx		# (len - number of positives - number of zeros)
                            | 	
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x22a:                      | Done:
0x22a: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x22b:                      | End:
                            | #/* $end ncopy-ys */
