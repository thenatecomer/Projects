
matrix_and_xor:

/* Version B */
	
	pushq %rbp
	rrmovq %rsp, %rbp
	pushq %r13		#Save register values (saved all not just callee)
	pushq %r12
	pushq %rbx

	xorq %rax, %rax		#set return value to zero
	xorq %r8, %r8 		#set r8 (Y count) to zero
	xorq %r9, %r9		#set r9 (address incrementer) to zero
LoopY:	irmovq $0x1, %rbx
	addq %rbx, %r8		#Y count++

	xorq %r10, %r10		#set r10 (X count) to zero
LoopX:	irmovq $0x1, %rbx	
	addq %rbx, %r10		#X count++
	
	
	rrmovq %rsi, %r11	#get starting address for matrix A (%rsi)
	addq %r9, %r11		#add current offset to the starting address
	mrmovq (%r11), %r11	#get the value from address
	
	rrmovq %rdx, %r12	#get starting address for matrix B (%rdx)
	addq %r9, %r12		#add current offset to the starting address
	mrmovq (%r12), %r12	#get the value from address
	
	rrmovq %rcx, %r13	#get starting address for matrix C (%rcx)
	addq %r9, %r13		#add current offset to the starting address

	andq %r11, %r12		#AND the corresponding elements from matrices A and B
	rmmovq %r12, (%r13)	#move the value into matrix C

	xorq %r12, %rax		#Xor the elements of matrix C together
	
	irmovq $0x8, %rbx
	addq %rbx, %r9		#increment address

	rrmovq %r10, %r14	#Use %r14 as a temporary value
	subq %rdi, %r14 	#Check to see if X count < size 
	jl LoopX		#Jump to LoopX as long as X < size

	rrmovq %r8, %r14	#Use %r14 as a temporary value
	subq %rdi, %r14		#Check to see if Y count < size
	jl LoopY		#Jump to LoopY as long as Y < size

End:	
	popq %rbx	#restore register values
	popq %r12
	popq %r13
	rrmovq %rbp, %rsp
	popq %rbp
	ret

