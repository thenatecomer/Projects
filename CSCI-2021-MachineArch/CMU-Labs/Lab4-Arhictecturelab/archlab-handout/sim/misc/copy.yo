                            | # Nathan Comer
                            | # ID: 5119060
                            | 
0x000:                      | .pos 0 
0x000: 30f40002000000000000 | init:	irmovq Stack, %rsp
0x00a: 2045                 | 	rrmovq %rsp, %rbp 
0x00c: 805800000000000000   | 	call main
0x015: 00                   | 	halt 
                            |  
0x018:                      |     	.align 8 
                            | # Source block 
0x018:                      | src: 
0x018: 0a00000000000000     | 	    .quad 0x00a 
0x020: b000000000000000     | 	    .quad 0x0b0 
0x028: 000c000000000000     | 	    .quad 0xc00 
0x030: 00d0000000000000     | 	    .quad 0xd000
                            | 
                            | # Destination block 
0x038:                      | dest: 
0x038: 1101000000000000     | 	    .quad 0x111 
0x040: 2202000000000000     | 	    .quad 0x222 
0x048: 3303000000000000     | 	    .quad 0x333 
0x050: 4404000000000000     | 	    .quad 0x444
                            |  
0x058: 30f71800000000000000 | main:	irmovq src,%rdi 	#set 1st argument (%rdi) to src
0x062: 30f63800000000000000 | 	irmovq dest,%rsi 	#set 2nd argument (%rsi) to dest
0x06c: 30f20400000000000000 | 	irmovq $4,%rdx 		#set 3rd argument (%rdx) to len
0x076: 808000000000000000   |     	call copy_block
0x07f: 90                   |     	ret 
                            |  
0x080:                      | copy_block:	
0x080: a05f                 | 	pushq %rbp 		#save register
0x082: a03f                 | 	pushq %rbx
0x084: 2045                 |     	rrmovq %rsp,%rbp 
0x086: 30f00000000000000000 |     	irmovq $0,%rax		#set register rax to 0 (Will be used to Xor words together)
0x090: 6222                 |     	andq %rdx,%rdx 
0x092: 73d400000000000000   |     	je End 
0x09b: 50370000000000000000 | Loop:	mrmovq (%rdi),%rbx	#get the first value
0x0a5: 40360000000000000000 | 	rmmovq %rbx,(%rsi)	#move it to the new memory location
0x0af: 6330                 |     	xorq %rbx,%rax		#Xor the word to rax
0x0b1: 30f10800000000000000 |     	irmovq $0x8,%rcx	#use rcx to increment source and dst addresses
0x0bb: 6017                 |     	addq %rcx, %rdi		#src++ 
0x0bd: 6016                 |     	addq %rcx, %rsi	    	#dest++
0x0bf: 30f1ffffffffffffffff |     	irmovq $-1,%rcx	      	#set rcx to -1
0x0c9: 6012                 |     	addq %rcx,%rdx        	#use rcx to decrease len by 1
0x0cb: 769b00000000000000   |     	jg    Loop           	#continue the Loop as long as len > 0
                            |  
                            | 	
0x0d4: 2054                 | End:	rrmovq %rbp, %rsp
0x0d6: b03f                 | 	popq %rbx
0x0d8: b05f                 | 	popq %rbp 		#restore register
0x0da: 90                   | 	ret 	
                            | 
0x200:                      | 	.pos 0x200 
0x200:                      | Stack: 
                            | 
                            | 
